buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'me.champeau.gradle:jmh-gradle-plugin:0.3.1'
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
        classpath "org.ajoberstar:gradle-git:1.3.2"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.17"
        classpath 'com.github.erizo.gradle:jcstress-gradle-plugin:0.8.0'
        classpath "com.netflix.nebula:gradle-extra-configurations-plugin:4.0.1"
    }
}
plugins {
    id "org.sonarqube" version "2.7"
}
apply plugin: 'idea'
apply from: "${rootDir}/libraries.gradle"

ext {
    releaseVersion = '0.14.1'
}

allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'me.champeau.gradle.jmh'
    apply plugin: 'com.jfrog.artifactory'

    version = '0.15.0-SNAPSHOT'
    group = 'io.github.resilience4j'
    description = 'Resilience4j is a lightweight, easy-to-use fault tolerance library designed for Java8 and functional programming'

    repositories {
        jcenter()
        mavenCentral()
    }
}
artifactoryPublish.skip=true // apply to all projects except the root

ext {
    coreProjects = subprojects.findAll {
        p -> !p.name.contains("documentation") && !p.name.endsWith("-bom")
    }
}

configure(project.coreProjects) {
    apply plugin: 'java'
    apply plugin: 'osgi'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply from: "${rootDir}/publishing.gradle"
    apply plugin: 'nebula.optional-base'
    apply plugin: 'jacoco'

    dependencies {
        compile ( libraries.vavr)
        compile ( libraries.slf4j)
        
        // JSR-305 only used for non-required meta-annotations
        compile "com.google.code.findbugs:jsr305:3.0.2", optional

        testCompile ( libraries.junit)
        testCompile ( libraries.assertj)
        testCompile ( libraries.logback)
        testCompile ( libraries.mockito)
        testCompile ( libraries.powermock)
        testCompile ( libraries.powermock_api_mockito)
        testCompile ( libraries.powermock_module_junit4)
        testCompile ( libraries.awaitility)

        jmh "org.openjdk.jmh:jmh-core:1.18"
        jmh "org.openjdk.jmh:jmh-generator-annprocess:1.18"
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = "1.8"
        targetCompatibility = "1.8"
        options.deprecation = true
        options.encoding = 'UTF-8'
        options.compilerArgs += ["-Xlint:unchecked", "-parameters"]

    }

    jmh {
        duplicateClassesStrategy = 'warn'
        jmhVersion = '1.17'
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "resilience4j"
        property "sonar.projectKey", "resilience4j_resilience4j"
        property "sonar.modules", "resilience4j-core,resilience4j-feign,resilience4j-metrics,resilience4j-micrometer,resilience4j-prometheus,resilience4j-retry,resilience4j-spring,resilience4j-timelimiter,resilience4j-bulkhead,resilience4j-circuitbreaker,resilience4j-ratelimiter,resilience4j-cache,resilience4j-circularbuffer,resilience4j-consumer,resilience4j-spring-boot,resilience4j-spring-boot2,resilience4j-reactor,resilience4j-rxjava2"
        property "sonar.projectVersion","0.15.0-SNAPSHOTS"

        property "sonar.links.homepage","https://github.com/resilience4j/resilience4j"
        property "sonar.links.ci","https://travis-ci.org/resilience4j/resilience4j"
        property "sonar.links.scm","https://github.com/resilience4j/resilience4j"
        property "sonar.links.issue","https://github.com/resilience4j/resilience4j/issues"

        property "sonar.java.source","1.8"
        property "sonar.sources","src/main/java"
        property "sonar.tests","src/test/java"
        property "sonar.java.binaries","build"
        property "sonar.java.test.binaries","build"
        property "sonar.binaries","build"
//        property "sonar.jacoco.reportPaths","build/reports/jacoco/test"

        property "sonar.language","java"


        property "sonar.sourceEncoding","UTF-8"
    }
}
def allTestCoverageFile = "$buildDir/jacoco/allTestCoverage.exec"

task jacocoMergeTest(type: JacocoMerge) {
    destinationFile = file(allTestCoverageFile)
    executionData = project.fileTree(dir: '.', include:'**/build/jacoco/test.exec')
}

task jacocoMerge(dependsOn: ['jacocoMergeTest']) {
    // used to run the other merge tasks
}

subprojects {
    sonarqube {
        properties {
            property "sonar.jacoco.reportPaths", allTestCoverageFile
        }
    }
}

tasks.check.dependsOn tasks.jacocoTestReport


test {
    dependsOn(subprojects.test) // required by cobertura to aggregate report
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.2'
}

artifactory {
    contextUrl = 'https://oss.jfrog.org'
    resolve {
        repository {
            repoKey = 'libs-release'
            maven = true
        }
    }
    publish {
        repository {
            repoKey = 'oss-snapshot-local' //The Artifactory repository key to publish to
            //when using oss.jfrog.org the credentials are from Bintray. For local build we expect them to be found in
            //~/.gradle/gradle.properties, otherwise to be set in the build server
            username = project.hasProperty('bintrayUsername') ? project.bintrayUsername : System.getenv('BINTRAY_USER')
            password = project.hasProperty('bintrayApiKey') ? project.bintrayApiKey : System.getenv('BINTRAY_KEY')
        }
        defaults {
            publications('mavenJava')
        }
    }
    if (System.properties['https.proxyHost']) {
        clientConfig.proxy.host = System.properties['https.proxyHost']
        clientConfig.proxy.port = System.properties['https.proxyPort'].toInteger()
    }
}
