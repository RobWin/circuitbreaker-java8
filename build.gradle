buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.saliman:gradle-cobertura-plugin:2.3.2'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.7.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
        classpath 'me.champeau.gradle:jmh-gradle-plugin:0.3.1'
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
        classpath "org.ajoberstar:gradle-git:1.3.2"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.0.0"
    }
}

apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.jfrog.bintray'
apply plugin: "com.jfrog.artifactory"
apply plugin: 'me.champeau.gradle.jmh'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'org.ajoberstar.github-pages'

group = 'io.github.robwin'
description = 'A CircuitBreaker pattern implementation for Java 8 and functional programming.'
version = '0.9-0-SNAPSHOT'
ext.releaseVersion = '0.8.2'

allprojects {
    apply plugin: 'java'
    apply plugin: 'net.saliman.cobertura'
}

subprojects {
    repositories {
        jcenter()
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = "1.8"
        targetCompatibility = "1.8"
        options.deprecation = true
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint:unchecked"
    }

    cobertura {
        coverageIgnoreTrivial = true
    }

    jar {
        dependsOn(test)
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

repositories {
    maven { url 'http://repo.spring.io/libs-snapshot' }
    mavenCentral()
    jcenter()

    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

def files = subprojects.collect { new File(it.projectDir, '/build/cobertura/cobertura.ser') }
cobertura {
    coverageFormats = ['html', 'xml']
    coverageSourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    coverageMergeDatafiles = files
}

test {
    dependsOn(subprojects.test)
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

tasks.coveralls {
    dependsOn 'check'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2'
}

asciidoctor {
    sources {
        include 'index.adoc'
    }
    backends = ['html5']
    attributes = [
            doctype: 'book',
            toc: 'left',
            toclevels: '3',
            numbered: '',
            sectlinks: '',
            sectanchors: '',
            hardbreaks: '',
            'release-version': project.releaseVersion
    ]
    resources {
        from(sourceDir) {
            include 'images/**'
        }
    }
}

artifactory {
    contextUrl = 'https://oss.jfrog.org'
    resolve {
        repository {
            repoKey = 'libs-release'
        }
    }
    publish {
        repository {
            repoKey = 'oss-snapshot-local' //The Artifactory repository key to publish to
            //when using oss.jfrog.org the credentials are from Bintray. For local build we expect them to be found in
            //~/.gradle/gradle.properties, otherwise to be set in the build server
            username = project.hasProperty('bintrayUsername') ? project.bintrayUsername : System.getenv('BINTRAY_USER')
            password = project.hasProperty('bintrayApiKey') ? project.bintrayApiKey : System.getenv('BINTRAY_KEY')
        }
        defaults {
            publications('mavenJava')
        }
    }
    if (System.properties['https.proxyHost']) {
        clientConfig.proxy.host = System.properties['https.proxyHost']
        clientConfig.proxy.port = System.properties['https.proxyPort'].toInteger()
    }
}

asciidoctor.dependsOn test
publishGhPages.dependsOn asciidoctor

githubPages {
    repoUri = 'https://github.com/RobWin/javaslang-circuitbreaker.git'

    credentials {
        username = project.hasProperty('githubUser') ? project.githubUser : System.getenv('GITHUB_USER')
        password = project.hasProperty('githubPassword') ? project.githubPassword : System.getenv('GITHUB_PASSWORD')
    }

    pages {
        from file(asciidoctor.outputDir.path + '/html5')
    }
}
