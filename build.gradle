buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.saliman:gradle-cobertura-plugin:2.3.2'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.7.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
        classpath 'me.champeau.gradle:jmh-gradle-plugin:0.3.1'
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
        classpath "org.ajoberstar:gradle-git:1.3.2"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.0.0"
        classpath 'com.github.erizo.gradle:jcstress-gradle-plugin:0.8.0'
    }
}

apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.jfrog.bintray'
apply plugin: "com.jfrog.artifactory"

version = '0.9-0-SNAPSHOT'

ext {
    releaseVersion = '0.8.2'
    javaslangVersion = '2.0.5'
    rxJavaVersion = '2.0.6'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'net.saliman.cobertura'
    apply plugin: 'me.champeau.gradle.jmh'

    group = 'io.github.robwin'
    description = 'A lightweight, easy-to-use fault tolerance library designed for Java8 and functional programming'

    repositories {
        jcenter()
        mavenCentral()
    }
}

/* Why do we need this?
sourceSets {
    main {
        java {
            srcDir project(':resilience4j-ratelimiter').file('src/main/java')
            srcDir project(':resilience4j-circularbuffer').file('src/main/java')
        }
    }
}
*/

subprojects {
    dependencies {
        compile "io.javaslang:javaslang:${javaslangVersion}"
        compile "org.slf4j:slf4j-api:1.7.24"

        testCompile "io.dropwizard.metrics:metrics-core:3.1.2"
        testCompile "junit:junit:4.11"
        testCompile "org.assertj:assertj-core:3.6.2"
        testCompile "ch.qos.logback:logback-classic:0.9.26"
        testCompile "io.dropwizard.metrics:metrics-healthchecks:3.1.2"
        testCompile "org.mockito:mockito-core:1.10.19"
        testCompile "org.powermock:powermock:1.6.6"
        testCompile "org.powermock:powermock-api-mockito:1.6.6"
        testCompile "org.powermock:powermock-module-junit4:1.6.6"
        testCompile "com.jayway.awaitility:awaitility:1.7.0"
        testCompile "org.mapdb:thread-weaver:3.0.mapdb"

        jmh "ch.qos.logback:logback-classic:0.9.26"
        jmh "org.openjdk.jmh:jmh-generator-annprocess:1.12"
    }

    jmh {
        duplicateClassesStrategy = 'warn'
        jmhVersion = '1.17'
    }

    test {
        exclude 'io/github/robwin/circularbuffer/concurrent/'
        exclude 'io/github/robwin/circuitbreaker/concurrent/'
    }
}

def files = subprojects.collect { new File(it.projectDir, '/build/cobertura/cobertura.ser') }
cobertura {
    coverageFormats = ['html', 'xml']
    coverageSourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    coverageMergeDatafiles = files
}

tasks.coveralls {
    dependsOn 'check'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2'
}

artifactory {
    contextUrl = 'https://oss.jfrog.org'
    resolve {
        repository {
            repoKey = 'libs-release'
        }
    }
    publish {
        repository {
            repoKey = 'oss-snapshot-local' //The Artifactory repository key to publish to
            //when using oss.jfrog.org the credentials are from Bintray. For local build we expect them to be found in
            //~/.gradle/gradle.properties, otherwise to be set in the build server
            username = project.hasProperty('bintrayUsername') ? project.bintrayUsername : System.getenv('BINTRAY_USER')
            password = project.hasProperty('bintrayApiKey') ? project.bintrayApiKey : System.getenv('BINTRAY_KEY')
        }
        defaults {
            publications('mavenJava')
        }
    }
    if (System.properties['https.proxyHost']) {
        clientConfig.proxy.host = System.properties['https.proxyHost']
        clientConfig.proxy.port = System.properties['https.proxyPort'].toInteger()
    }
}
